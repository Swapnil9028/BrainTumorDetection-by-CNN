import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

classifier = Sequential()

classifier.add(Convolution2D(32, 3, 3, input_shape = (64, 64, 3), activation = 'relu'))

classifier.add(MaxPooling2D(pool_size = (2, 2)))

classifier.add(Convolution2D(32, 3, 3, activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

classifier.add(Flatten())

classifier.add(Dense(output_dim = 128, activation = 'relu'))
classifier.add(Dense(output_dim = 1, activation = 'sigmoid'))

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

import os 
os.getcwd()
os.chdir('F:\Project work\BrainCanerDetection\Train_img')

training_set = train_datagen.flow_from_directory('F:\Project work\BrainCanerDetection\Train_img',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('F:\Project work\BrainCanerDetection\Test2_img',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')


classifier.fit_generator(training_set,
                         samples_per_epoch = 16,
                         nb_epoch = 3, # nb_epoch = 25,
                         validation_data = test_set,
                         nb_val_samples = 13)
                         
import numpy as np
from keras.preprocessing import image
test_image = image.load_img('F:\Project work\\1Perfect.jpg', target_size = (64, 64))
test_image

test_image = image.img_to_array(test_image)

test_image = np.expand_dims(test_image, axis = 0)
test_image

result = classifier.predict(test_image)
result

test_image = image.load_img('F:\Project work\\1Perfect.jpg', target_size = (64, 64))

test_image = image.img_to_array(test_image)

test_image = np.expand_dims(test_image, axis = 0)

result = classifier.predict(test_image)

training_set.class_indices

if result[0][0] == 1:
    prediction = 'Malignant'
else:
    prediction = 'Benign'
print(prediction)
